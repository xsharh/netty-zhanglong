syntax = "proto3";
package io.do.proto;

option java_package = "io.dzh.netty.z_proto";
option java_outer_classname = "StudentProto";
option java_multiple_files = true;

// 四种通讯模式 req,resp; req,stream; stream,resp; stream,stream;
// gradlew generateProto 代码生成

service StudentService{
    // req,resp;
    rpc getRealnameByRealname(MyRequest) returns (MyResponse){}
    // req,stream; 与thrift不同, grpc 必须使用message 传输
    rpc getStudentsByAge(StudentRequest) returns (stream StudentResponse){}
    // stream,resp;
    rpc getStudentsWrapperByAges(stream StudentRequest) returns (StudentResponseList){};
    // stream,stream;
    rpc biTalk(stream StreamRequest) returns (stream StreamResponse){};

}
message MyRequest{
    string realname = 1;
}
message MyResponse{
    string realname = 2;
}

message StudentRequest{
    int32 age = 1;
}
message StudentResponse{
     string name = 1;
     int32 age = 2;
     string city = 3;
}

// 类似于集合
message StudentResponseList{
    repeated StudentResponse studentResponse= 1;
}

message StreamRequest{
    string request_info = 1;
}
message StreamResponse{
    string response_info = 1;
}